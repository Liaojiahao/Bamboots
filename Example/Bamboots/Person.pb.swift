// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Person.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Person: SwiftProtobuf.Message {
  static let protoMessageName: String = "Person"

  var name: String = String()

  var uid: Int32 = 0

  var email: String = String()

  var phone: [Person.PhoneNumber] = []

  var projects: Dictionary<String,Person.PhoneNumber> = [:]

  var info: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PhoneType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case mobile // = 0
    case home // = 1
    case work // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .mobile
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .mobile
      case 1: self = .home
      case 2: self = .work
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .mobile: return 0
      case .home: return 1
      case .work: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct PhoneNumber: SwiftProtobuf.Message {
    static let protoMessageName: String = Person.protoMessageName + ".PhoneNumber"

    var number: String = String()

    var type: Person.PhoneType = .mobile

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.number)
        case 2: try decoder.decodeSingularEnumField(value: &self.type)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.number.isEmpty {
        try visitor.visitSingularStringField(value: self.number, fieldNumber: 1)
      }
      if self.type != .mobile {
        try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularInt32Field(value: &self.uid)
      case 3: try decoder.decodeSingularStringField(value: &self.email)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.phone)
      case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Person.PhoneNumber>.self, value: &self.projects)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.info)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt32Field(value: self.uid, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if !self.phone.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.phone, fieldNumber: 4)
    }
    if !self.projects.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Person.PhoneNumber>.self, value: self.projects, fieldNumber: 5)
    }
    if !self.info.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.info, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Result: SwiftProtobuf.Message {
  static let protoMessageName: String = "Result"

  var state: Int32 = 0

  var projects: Dictionary<String,Person> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.state)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Person>.self, value: &self.projects)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 1)
    }
    if !self.projects.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Person>.self, value: self.projects, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Person: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "uid"),
    3: .same(proto: "email"),
    4: .same(proto: "phone"),
    5: .same(proto: "projects"),
    6: .same(proto: "info"),
  ]

  func _protobuf_generated_isEqualTo(other: Person) -> Bool {
    if self.name != other.name {return false}
    if self.uid != other.uid {return false}
    if self.email != other.email {return false}
    if self.phone != other.phone {return false}
    if self.projects != other.projects {return false}
    if self.info != other.info {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Person.PhoneType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MOBILE"),
    1: .same(proto: "HOME"),
    2: .same(proto: "WORK"),
  ]
}

extension Person.PhoneNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "type"),
  ]

  func _protobuf_generated_isEqualTo(other: Person.PhoneNumber) -> Bool {
    if self.number != other.number {return false}
    if self.type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Result: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "projects"),
  ]

  func _protobuf_generated_isEqualTo(other: Result) -> Bool {
    if self.state != other.state {return false}
    if self.projects != other.projects {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
